version: '3.9'

services:
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - MONGO_DATA:/data/db
      - MONGO_CONFIG:/data/configdb
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_PORT: "27017"
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - mongo
    restart: unless-stopped
    command: sh -c "echo 'Waiting for MongoDB...'; while ! nc -z mongo 27017; do sleep 1; done; echo 'MongoDB is up!'; node app"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - TOPIC_AUTO_CREATE=false
      - DELETE_TOPIC_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-topics:
    image: wurstmeister/kafka
    container_name: kafka-topics
    depends_on:
      - kafka
    networks:
      - app-network
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        sleep 30
        kafka-topics.sh --create --bootstrap-server kafka:9092 --topic suspend-item-from-inventory --partitions 1 --replication-factor 1 --if-not-exists
        kafka-topics.sh --create --bootstrap-server kafka:9092 --topic cart-item-statistics --partitions 1 --replication-factor 1 --if-not-exists
        kafka-topics.sh --list --bootstrap-server kafka:9092
        echo 'Topics created successfully'
      "
    restart: "no"

  address:
    image: smlkttn836/address-service:latest
    container_name: address-service
    ports:
      - "8090:8090"
    networks:
      - app-network
    depends_on:
      - mongo
      - kafka
      - discovery
    environment:
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
    restart: unless-stopped

  company:
    image: smlkttn836/company-service:latest
    container_name: company-service
    ports:
      - "8091:8091"
    networks:
      - app-network
    depends_on:
      - mongo
      - kafka
      - discovery
    environment:
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
    restart: unless-stopped

  inventory:
    image: smlkttn836/inventory-service:latest
    container_name: inventory-service
    ports:
      - "8092:8092"
    networks:
      - app-network
    depends_on:
      - mongo
      - kafka
      - discovery
    environment:
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
    restart: unless-stopped

  contributor:
    image: smlkttn836/contributor-service:latest
    container_name: contributor-service
    ports:
      - "8093:8093"
    networks:
      - app-network
    depends_on:
      - mongo
      - kafka
      - kafka-topics
      - discovery
    environment:
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      spring.kafka.bootstrap-servers: kafka:9092
    restart: unless-stopped

  discovery:
    image: smlkttn836/discovery-service:latest
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - app-network

  gateway:
    image: smlkttn836/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - discovery
    environment:
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  MONGO_DATA:
  MONGO_CONFIG:
